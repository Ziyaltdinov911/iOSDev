//
//  main.swift
//  Project-HW
//
//  Created by Камиль Байдиев on 24.12.2023.
//

import Foundation

//Задача: Работа с иерархией животных и управление циклом удержания
//Описание:
//Вам необходимо создать иерархию классов для представления животных. Каждое животное должно соответствовать протоколу Animal, который определяет общие характеристики и функционал для всех животных. Реализуйте классы Dog и Cat как конкретные типы животных.
//
//Важным моментом является использование дженериков и ограничений протоколов в функции makeSound. Эта функция принимает любое животное, соответствующее протоколу Animal, и вызывает метод makeSound. Это демонстрирует полиморфное поведение, позволяя вызывать метод makeSound на различных типах животных.
//
//Также создайте класс RetainCycleExample, который использует слабые ссылки (weak) для предотвращения возможного цикла удержания. Внутри этого класса создаются экземпляры Dog и Cat, и их слабые ссылки сохраняются в weakDog и weakCat. Это гарантирует корректное освобождение памяти при удалении RetainCycleExample.
//
//По сути ребят иерархию заново писать даже не нужно, так как на прошлом занятии в домашке вам была уже задана разработка иерархии животных, используйте уже ваш готовый код, просто с небольшими изменениями, чтобы результат 9-й дз. соответствовал заданному условию задачи.

protocol Animal: AnyObject {
    func makeSound()
}

class Dog: Animal {
    func makeSound() {
        print("Пёсик говорит:\n- «Гав»")
    }
}

class Cat: Animal {
    func makeSound() {
        print("Котик говорит:\n- «Мяв»")
    }
}

class RetainCycleExample {
    var weakDog: Dog?
    var weakCat: Cat?
    
    init() {
        weakDog = Dog()
        weakCat = Cat()
    }
    
    deinit {
        print("Деинит")
    }
}

func makeSound<T: Animal>(_ animal: T) {
    animal.makeSound()
}

let dog = Dog()
let cat = Cat()

makeSound(dog)
makeSound(cat)

var myAnimal: RetainCycleExample? = RetainCycleExample()

myAnimal = nil


